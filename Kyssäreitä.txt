
NAPIT kysymyksen hakemiseksi, ei uutta kysymystä ennen uutta painallusta.

Logiikka:

button onClick =>

const question = Math.floor(Math.random() * 3)

switch (question) {
  case 1:
    return herringGenerator1(
        fakeVerb, fakeNoun, fakeTagYes, fakeTagNo)
        const tagYes = fakeTagYes[Math.floor(Math.random() * fakeTagYes.length)];
        const tagNo = fakeTagNo[Math.floor(Math.random() * fakeTagNo.length)];
    return(
        <div>
{herringQuestion1} 
<button onClick={() => setanswer("yes")}>Yes</button>
<button onClick={() => setanswer("no")}>No</button>
{answer && (answer==="yes"? tagYes.name: tagNo.name)}
        </div>
)

    break;

  case 2:
const herringQuestion2 = herringGenerator2(
fakeItem, 
}

    break;

  case 3:
   const herringGenerator3 = (items, negative) => {
    const item1= items[Math.floor(Math.random() * items.length)];
    const negative1 = negative[Math.floor(Math.random() * negative.length)];
    const item2= items[Math.floor(Math.random() * items.length)];
    const negative2 = negative[Math.floor(Math.random() * negative.length)];
    return
    `If you had to choose between ${item1.name} that ${negative1.name} or
    ${item2.name} that ${negative2.name}, 
    which would you choose, if you HAD to?`;
}



************************


Miten suosittelet lisäämään sanakirjan databaseen? 







**********************


Item 1 ja Item 2 -> 2 = while loop jossa 2 arvotaan uusiksi jos se on sama kuin 1.


*******************


IF-ELSE:

  .then(result => {
if(result.rowCount > 0) {
  res.send("OK");
} else {
  res.status(404).send("Not found!")
}



DATABASE:

Pitääkö/kannattaako DBeaveriin tehdä database jokaiselle komponentille erikseen vai teenkö mieluummin yhteen tiedostoon ison läjän pienempiä listoja?

Miten suosittelet lisäämään sanakirjan databaseen? 

Olisiko ainakin Roi-verbien suhteen järkevämpää lisätä niitä manuaalisesti?

RANDOMIZER:

Kaksi vaihtoehtoa:

NYT: const [RH1, RH2, RH3] -> Randomizer jne

------->>>>>>VAI:

Randomizer [1, 2, 3] jne
-> if [1], then RH1 jne.

(Eli olisiko sittenkin fiksumpaa hakea ensin satunnainen numero ja sitten käyttää sitä if-else-logiikan kanssa?)